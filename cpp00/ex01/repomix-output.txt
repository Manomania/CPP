This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-05-09T12:46:17.131Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
include/
  contact.hpp
  phonebook.hpp
src/
  contact.cpp
  main.cpp
  phonebook.cpp
Makefile

================================================================
Files
================================================================

================
File: include/contact.hpp
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Contact.hpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maximart <maximart@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/04 18:20:38 by maximart          #+#    #+#             */
/*   Updated: 2025/05/06 18:08:22 by maximart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once
#include <iostream>

class Contact {
private:
	std::string	firstName;
	std::string	lastName;
	std::string	nickName;
	std::string	phoneNumber;
	std::string	darkestSecret;
public:
	Contact();
	~Contact();
	bool		promptContact();
	std::string	getContact() const;
	std::string	getFullContact() const;
};

================
File: include/phonebook.hpp
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   PhoneBook.hpp                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maximart <maximart@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 13:26:43 by maximart          #+#    #+#             */
/*   Updated: 2025/05/06 19:13:35 by maximart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#pragma once
#include <contact.hpp>

class PhoneBook {
private:
	Contact	contacts[8];
	int		count;
	int		oldest;
public:
	PhoneBook();
	~PhoneBook();
	void	addContact();
	void	searchContact() const;
	void	displayContact(int Index) const;
};

================
File: src/contact.cpp
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   Contact.cpp                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maximart <maximart@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/04 18:20:38 by maximart          #+#    #+#             */
/*   Updated: 2025/05/06 19:15:41 by maximart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "contact.hpp"
#include <iomanip>
#include <sstream>
#include <limits>
#include <cctype>

Contact::Contact() {}
Contact::~Contact() {}

static bool	isEmpty(std::string &Str)
{
	return (Str.empty());
}

static bool	isNotDigit(std::string &Str)
{
	for (size_t i = 0; i < Str.length(); i++)
	{
		if (!std::isdigit((Str[i])))
			return (true);
	}
	return (false);
}

static bool	isAlpha(std::string &Str)
{
	for (size_t i = 0; i < Str.length(); i++)
	{
		if (!std::isalpha((Str[i])))
			return (true);
	}
	return (false);
}

bool Contact::promptContact()
{
	std::string Input;

	std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
	while (true)
	{
		std::cout << "First name: ";
		std::getline(std::cin, this->firstName);
		if (!isEmpty(firstName) && !isAlpha(firstName))
			break ;
		std::cout << "Error: First name cannot be empty and must contain valid character\n" << std::endl;
	}
	while (true)
	{
		std::cout << "Last name: ";
		std::getline(std::cin, this->lastName);
		if (!isEmpty(lastName) && !isAlpha(lastName))
			 break ;
		std::cout << "Error: Last name cannot be empty and must contain valid character\n" << std::endl;
	}
	while (true)
	{
		std::cout << "Nickname: ";
		std::getline(std::cin, this->nickName);
		if (!isEmpty(nickName))
			break ;
		std::cout << "Error: Nickname cannot be empty and must contain valid character\n" << std::endl;
	}
	while (true)
	{
		std::cout << "Phone number: ";
		std::getline(std::cin, this->phoneNumber);
		if (!isEmpty(phoneNumber) && !isNotDigit(phoneNumber))
			break ;
		std::cout << "Error: Phone number cannot be empty and must contain valid character\n" << std::endl;
	}
	while (true)
	{
		std::cout << "Darkest secret: ";
		std::getline(std::cin, this->darkestSecret);
		if (!isEmpty(darkestSecret))
			break ;
		std::cout << "Error: Darkest secret cannot be empty\n" << std::endl;
	}
	return (true);
}

static std::string	truncate(std::string str)
{
	if (str.length() > 10)
		return (str.substr(0, 10 - 1) + ".");
	return (str);
}

std::string	Contact::getContact() const
{
	std::stringstream	ss;

	ss << std::setw(10) << truncate(this->firstName) << "|";
	ss << std::setw(10) << truncate(this->lastName) << "|";
	ss << std::setw(10) << truncate(this->nickName) << "|";
	return (ss.str());
}

std::string	Contact::getFullContact() const
{
	std::stringstream	ss;

	ss << "First name" << std::setw(7) << " : " << this->firstName << std::endl;
	ss << "Last name" << std::setw(8) << " : " << this->lastName << std::endl;
	ss << "Nickname" << std::setw(9) << " : " << this->nickName << std::endl;
	ss << "Phone number" << std::setw(5) << " : " << this->phoneNumber << std::endl;
	ss << "Darkest secret" << std::setw(2) << " : " << this->darkestSecret << std::endl;
	return (ss.str());
}

================
File: src/main.cpp
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maximart <maximart@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/06 15:36:04 by maximart          #+#    #+#             */
/*   Updated: 2025/05/06 19:06:30 by maximart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <phonebook.hpp>

void clearScreen() {
	std::cout << "\033[2J\033[1;1H";
}

int	main()
{
	PhoneBook	phoneBook;
	Contact		contact;
	std::string	choice;

	std::cout << "\033[2J\033[1;1H";
	while (42)
	{
		std::cout << "Make your choice - ADD, SEARCH, EXIT :" << std::endl;
		std::cin >> choice;
		std::cout << std::endl;
		if (choice == "EXIT")
			break ;
		else if (choice == "ADD")
			phoneBook.addContact();
		else if (choice == "SEARCH")
			phoneBook.searchContact();
		else
			std::cout << "Invalid choice" << std::endl;
		std::cout << std::endl;
	}
	return (0);
}

================
File: src/phonebook.cpp
================
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   PhoneBook.cpp                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: maximart <maximart@student.42lyon.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 13:26:43 by maximart          #+#    #+#             */
/*   Updated: 2025/05/06 19:13:35 by maximart         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "phonebook.hpp"
#include <iomanip>

PhoneBook::PhoneBook() {
	count = 0;
	oldest = 0;
}
PhoneBook::~PhoneBook() {}

void PhoneBook::addContact()
{
	int	Index;

	if (count >= 8)
		Index = oldest;
	else
		Index = count;
	if (!contacts[Index].promptContact())
	{
		std::cout << "Error" << std::endl;
		return ;
	}
	if (count >= 8)
	{
		Index = oldest;
		oldest = (oldest + 1) % 8;
	}
	else
		Index = count++;
	std::cout << "Contact added successfully" << std::endl;
	std::cout << std::endl;
}

void	printHeader()
{
	std::cout << "|----------|----------|----------|----------|" << std::endl;
	std::cout << "|" << std::setw(10) << "INDEX" << "|";
	std::cout << std::setw(10) << "FIRST NAME" << "|";
	std::cout << std::setw(10) << "LAST NAME" << "|";
	std::cout << std::setw(10) << "NICKNAME" << "|" << std::endl;
	std::cout << "|----------|----------|----------|----------|" << std::endl;
}

void PhoneBook::displayContact(int Index) const
{
	std::cout << "CONTACT #" << (Index + 1) << ": " << std::endl << contacts[Index].getFullContact() << std::endl;
}

void	PhoneBook::searchContact() const
{
	int	index;

	if (count == 0)
	{
		std::cout << "EMPTY" << std::endl;
		return ;
	}
	printHeader();
	for (int i = 0; i < count; i++)
	{
		std::cout << "|" << std::setw(10) << (i+1) << "|" << contacts[i].getContact() << std::endl;
		std::cout << "|----------|----------|----------|----------|" << std::endl;
	}
	std::cout << "\nEnter index to display (1-" << count << "): ";
	if (!(std::cin >> index))
	{
		std::cout << "Error: Only digits allowed" << std::endl;
		std::cin.clear();
		return ;
	}
	std::cout << std::endl;
	if (index > count || index < 1)
	{
		std::cout << "Error: Index must be between 1 and " << count << std::endl;
		std::cout << std::endl;
		return ;
	}
	displayContact(index - 1);
}

================
File: Makefile
================
########################################################################################################################
#                                                      VARIABLES                                                       #
########################################################################################################################

AUTHOR				:=	maximart
NAME				:=	phonebook
HEADER				=	$(INC_DIR)
CC 					:=	c++
CFLAGS 				:=	-Wall -Wextra -Werror
CFLAGS				+=	-std=c++98
AR					:=	ar rcs
RM					:=	rm -f

SRC_F				=	phonebook \
						contact \
						main

SRC					=	$(addprefix $(SRC_DIR), $(addsuffix .cpp, $(SRC_F)))
OBJ 				=	$(addprefix $(OBJ_DIR), $(addsuffix .o, $(SRC_F)))
HDR					=	$(addprefix $(INC_DIR), $(addsuffix .hpp, $(SRC_F)))
DEP 				=	$(addprefix $(OBJ_DIR), $(addsuffix .d, $(SRC_F)))

########################################################################################################################
#                                                      DIRECTORY                                                       #
########################################################################################################################

SRC_DIR				:=	src/
OBJ_DIR				:=	obj/
INC_DIR				:=	include/

########################################################################################################################
#                                                       TARGETS                                                        #
########################################################################################################################

.print_header:
							$(call DISPLAY_TITLE)
							$(call SEPARATOR)
							$(call BUILD)
							$(call SEPARATOR)

all:					.print_header $(NAME)

clean:					.print_header
							@printf "%$(SPACEMENT)b%b" "$(BLUE)[$(OBJ_DIR)]:" "$(GREEN)[✓]$(DEF_COLOR)\n"
							@rm -rf $(OBJ_DIR)
							@printf "$(RED)=> Deleted!$(DEF_COLOR)\n"
							$(call SEPARATOR)

fclean: 				clean
							@printf "%$(SPACEMENT)b%b" "$(BLUE)[$(NAME)]:" "$(GREEN)[✓]$(DEF_COLOR)\n"
							@$(RM) $(NAME)
							@printf "$(RED)=> Deleted!$(DEF_COLOR)\n"
							$(call SEPARATOR)

re: 					.print_header fclean all

.PHONY: 				all clean fclean re

########################################################################################################################
#                                                       COMMANDS                                                       #
########################################################################################################################

$(NAME):				$(OBJ)
							@$(CC) $(CFLAGS) $(OBJ) -o $@

$(OBJ_DIR)%.o: 			$(SRC_DIR)%.cpp $(INC_DIR)
							@mkdir -p $(dir $@)
							@$(CC) $(CFLAGS) -I$(INC_DIR) -c $< -o $@
							$(call PROGRESS_BAR_PERCENTAGE)
							$(if $(filter $(COMPILED_SRCS),$(SRCS_TO_COMPILE)),$(call SEPARATOR))

########################################################################################################################
#                                                       COLOURS                                                        #
########################################################################################################################

DEF_COLOR			:=	\033[0;39m
ORANGE				:=	\033[0;33m
GRAY				:=	\033[0;90m
RED					:=	\033[0;91m
GREEN				:=	\033[1;92m
YELLOW				:=	\033[1;93m
BLUE				:=	\033[0;94m
MAGENTA				:=	\033[0;95m
CYAN				:=	\033[0;96m
WHITE				:=	\033[0;97m

########################################################################################################################
#                                                       DISPLAY                                                        #
########################################################################################################################

SPACEMENT			:=	-41
COMPILED_SRCS		:=	0
FRAMES				:=	⠋ ⠙ ⠹ ⠸ ⠼ ⠴ ⠦ ⠧ ⠇ ⠏
SLEEP_FRAME			:=	0.001

SRCS_TO_COMPILE		=	$(shell find $(SRC_DIR) -type f -name "*.cpp" -newer $(NAME) 2>/dev/null | wc -l)
ifeq ($(SRCS_TO_COMPILE),0)
	SRCS_TO_COMPILE =	$(shell find $(SRC_DIR) -type f -name "*.cpp" 2>/dev/null | wc -l)
endif

define PROGRESS_BAR_PERCENTAGE
						$(eval COMPILED_SRCS := $(shell expr $(COMPILED_SRCS) + 1))
						@if [ $(COMPILED_SRCS) -eq 1 ]; then \
							printf "$(BLUE)[$(NAME)]:$(DEF_COLOR)\n"; \
						fi
						@percentage=$$(if [ $(SRCS_TO_COMPILE) -eq 0 ]; then echo 0; else echo "scale=0; $(COMPILED_SRCS) * 100 / $(SRCS_TO_COMPILE)" | bc; fi); \
						for frame in $(FRAMES); do \
							printf "\r$$frame Compiling... [%d/%d] %d%%" $(COMPILED_SRCS) $(SRCS_TO_COMPILE) $$percentage; \
							sleep $(SLEEP_FRAME); \
						done; \
						if [ $(COMPILED_SRCS) -eq $(SRCS_TO_COMPILE) ]; then \
							printf "%-42b%b" "\r$(GREEN)Compilation finished [$(COMPILED_SRCS)/$(SRCS_TO_COMPILE)]" "$(GREEN)[✓]$(DEF_COLOR)\n"; \
						fi
endef

#TITLE ASCII ART - SLANT
define	DISPLAY_TITLE
						@echo "$(RED)			   __________  ____ "
						@echo "$(ORANGE)			  / ____/ __ \\/ __ \\"
						@echo "$(YELLOW)			 / /   / /_/ / /_/ /"
						@echo "$(GREEN)			/ /___/ ____/ ____/ "
						@echo "$(BLUE)			\____/_/   /_/      "
						@printf "$(PURPLE)			                    $(DEF_COLOR)"
endef

define	SEPARATOR
						@printf "\n"
						@echo "$(ORANGE)--------------------------------------------------------------------------$(DEF_COLOR)";
						@printf "\n"
endef

define	BUILD
						@printf "%-47b%b" "$(GREEN)AUTHOR:$(DEF_COLOR)" "$(AUTHOR)\n";
						@printf "%-47b%b" "$(GREEN)NAME:$(DEF_COLOR)" "$(NAME)\n";
						@printf "%-47b%b" "$(GREEN)CC:$(DEF_COLOR)" "$(CC)\n";
						@printf "%-47b%b" "$(GREEN)FLAGS:$(DEF_COLOR)" "$(CFLAGS)\n";
endef

-include $(DEP)
